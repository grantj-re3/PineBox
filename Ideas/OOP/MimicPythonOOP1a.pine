//@version=5
// Â© 2024 GJ
indicator("MimicPythonOOP1a")

// PURPOSE
// Attempt to make Pine Script mimic Python-OOP for encapsulation
// and composition (but not inheritance or polymorthism).
// 
// We need several workarounds, particularly to achieve:
// - Class vars and methods
// - Constructors
// - Methods which do not use self (i.e. the first arg)
//
// Try to implement the following Python tutorial:
//   Corey Schafer: Python OOP Tutorials - Working with Classes
//   Tutorials 1, 2 and 3
//   https://www.youtube.com/playlist?list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc

//////////////////////////////////////////////////////////////////////////////
// EmployeeClass: class vars (make a single copy)
//////////////////////////////////////////////////////////////////////////////
type EmployeeClassCls
    int num_of_emps = 0
    float raise_amt = 1.04

// Workaround: We capitalise the first letter to make this object look a bit like a class when in use
EmployeeClass_cls = EmployeeClassCls.new()  // Workaround: Make a *single* copy of class vars

//////////////////////////////////////////////////////////////////////////////
// EmployeeClass: instance vars, methods
//////////////////////////////////////////////////////////////////////////////
type EmployeeClass
    string first
    string last
    string email
    float  pay
    EmployeeClassCls _cls               // A workaround to get access to class vars/methods from each instance/object

method fullname(EmployeeClass self) =>
    str.format("{0} {1}", self.first, self.last)    // Return the string

method apply_raise(EmployeeClass self) =>
    self.pay := self.pay * self._cls.raise_amt

//////////////////////////////////////////////////////////////////////////////
// EmployeeClass: constructor(s)
//////////////////////////////////////////////////////////////////////////////
// Constructor
// Workaround: We capitalise the first letter to make this function look a bit like a Python constructor when in use
EmployeeClass_init(string first, string last, float pay) =>
    // We can do the next 7 lines in a single statement, but the layout below looks similar to the original Python example
    self = EmployeeClass.new()
    // All EmployeeClass objects will point to the *one* instance of the class object.
    // Beware: We are referencing a global var. May cause problems if we want to overload this method name.
    self._cls  := EmployeeClass_cls
    self.first := first
    self.last  := last
    self.pay   := pay
    self.email := str.format("{0}.{1}@email.com", first, last)
    self._cls.num_of_emps += 1
    self                                // Return the new object

// This was implemented as a Python @classmethod because the constructor (returned via the
// last line) was invoked with cls(...). We can't do that easily in Pine Script below.
// Similar to a Python @staticmethod (because cls.something isn't wanted, so we are forced
// to do a workaround below).
method from_string(EmployeeClassCls cls, string emp_str) =>
    cls.num_of_emps += 0                // Workaround: We must use the first arg of a method
    parts = str.split(emp_str, '-')
    EmployeeClass_init(parts.get(0), parts.get(1), str.tonumber(parts.get(2)))   // Return the new object

//////////////////////////////////////////////////////////////////////////////
// EmployeeClass: class/static methods
//////////////////////////////////////////////////////////////////////////////
// Similar to a Python @classmethod (because we use cls.something)
method set_raise_amt(EmployeeClassCls cls, float amount) =>
    cls.raise_amt := amount

//////////////////////////////////////////////////////////////////////////////
// Main
//////////////////////////////////////////////////////////////////////////////
if barstate.islast
    log.info("Attempt to make Pine Script mimic Python-OOP for encapsulation and composition (but not inheritance or polymorthism)")

    emp_1 = EmployeeClass_init('Corey', 'Schafer', 50000)
    emp_2 = EmployeeClass_init('Test', 'Employee', 60000)

    log.info(emp_1.email)
    log.info(emp_1.fullname())

    log.info(emp_2.email)
    log.info(emp_2.fullname())

    EmployeeClass_cls.set_raise_amt(1.05)
    log.info("{0}", emp_1.pay)
    emp_1.apply_raise()
    log.info("{0}", emp_1.pay)

    log.info("{0}", EmployeeClass_cls.raise_amt)
    // The _cls field is supposed to be private, but we are using it here
    // to show that each raise_amt field is derived from the *same* object.
    log.info("{0}", emp_1._cls.raise_amt)
    log.info("{0}", emp_2._cls.raise_amt)

    emp_str_1 = "John-Doe-70000"
    emp_str_2 = "Steve-Smith-30000"
    emp_str_3 = "Jane-Doe-90000"

    // Invoke the overloaded constructor
    new_emp_1 = EmployeeClass_cls.from_string(emp_str_1)
    log.info("{0}", new_emp_1.email)
    log.info("{0}", new_emp_1.pay)

    log.info("{0}", EmployeeClass_cls.num_of_emps)

