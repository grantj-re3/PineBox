// License: https://opensource.org/license/bsd-3-clause
// Â© 2024 grantj-re3

//@version=5
IND_TITLE = "MimicOOP_SimpleBank1a"
indicator(IND_TITLE)

// PURPOSE
// Attempt to translate the following Python OOP program into Pine Script:
//   Building a Simple Bank System in Python with OOP
//   https://codebricks.co.nz/python-oop-example-01
//
// 1/ We have decided to use *dummy* class level UDTs when there are
//    no class level attributes or methods.
// 2/ The tricky part about translating the above python script into
//    Pine Script is the code fragment in the User class below where
//    2 different account classes (BankAccount & SavingsAccount) can
//    be stored in the same array:
//        def __init__(self, user_id, name):
//            ...
//            self.accounts = []
//        def add_account(self, account):
//            self.accounts.append(account)
//    Pine Script allows only one type/UDT to be stored in an array. Hence
//    we either need to merge the two types into one (as I have done below)
//    or we need to have one array to store each account type.
// 3/ Gotcha: The transfer() method in python does not use self, so is not
//    behaving as an instance method. Pine Script generates a syntax error
//    when the first argument of a method is not used. Rather than changing
//    the behaviour, we have just performed a no-op action with self.

//////////////////////////////////////////////////////////////////////////////
const int TYPE_BANK_ACCOUNT     = 0
const int TYPE_SAVINGS_ACCOUNT  = 1

//////////////////////////////////////////////////////////////////////////////
// BankAccount
//////////////////////////////////////////////////////////////////////////////
// Class level vars. (Make a single object of this type.)
type BankAccountCls
    int _accountNumberCounter = 1000

//////////////////////////////////////////////////////////////////////////////
// Instance level vars.
type BankAccountInst
    BankAccountCls _cls
    int accountNumber
    int _type
    float balance
    float interestRate

//////////////////////////////////////////////////////////////////////////////
// Instance constructor(s)
method initBankAccount(BankAccountCls cls, float balance=0.0) =>
    self = BankAccountInst.new()
    self._cls  := cls       // All objects will point to the *one* instance of the class level object.
    self.accountNumber := self._cls._accountNumberCounter
    self._cls._accountNumberCounter += 1
    self.balance := balance
    self._type := TYPE_BANK_ACCOUNT
    self.interestRate := na
    self

// Constructor
method initSavingsAccount(BankAccountCls cls, float balance=0.0, interestRate=0.01) =>
    self = cls.initBankAccount(balance)
    self._type := TYPE_SAVINGS_ACCOUNT
    self.interestRate := interestRate
    self

//////////////////////////////////////////////////////////////////////////////
// Instance method(s)
method deposit(BankAccountInst self, float amount) =>
    if amount > 0
        self.balance += amount
        log.info("Deposited {0,number,#.##}. New balance: {1,number,#.##}", amount, self.balance)

    else
        log.info("Deposit amount must be positive")

method withdraw(BankAccountInst self, float amount) =>
    if amount > 0 and amount <= self.balance
        self.balance -= amount
        log.info("Withdrew {0,number,#.##}. New balance: {1,number,#.##}", amount, self.balance)

    else
        log.info("Insufficient funds or invalid amount")

method checkBalance(BankAccountInst self) =>
    self.balance

// Only for TYPE_SAVINGS_ACCOUNT
method applyInterest(BankAccountInst self) =>
    if self._type == TYPE_SAVINGS_ACCOUNT
        interest = self.balance * self.interestRate
        self.balance += interest
        log.info("Applied interest {0,number,#.##}. New balance: {1,number,#.##}",
          interest, self.balance)
    else
        log.error("Account {0,number,#} does not support applyInterest!", self.accountNumber)

//////////////////////////////////////////////////////////////////////////////
// User
//////////////////////////////////////////////////////////////////////////////
// Dummy class level vars. (Make a single object of this type.)
type NilUserCls
    int _k = 0

//////////////////////////////////////////////////////////////////////////////
// Instance level vars.
type UserInst
    NilUserCls _cls
    int userId
    string name
    BankAccountInst[] accounts

//////////////////////////////////////////////////////////////////////////////
// Instance constructor(s)
method init(NilUserCls cls, int userId, string name) =>
    self = UserInst.new()
    self._cls  := cls       // All objects will point to the *one* instance of the class level object.
    self.userId := userId
    self.name := name
    self.accounts := array.new<BankAccountInst>(0)
    self

//////////////////////////////////////////////////////////////////////////////
// Instance method(s)
method addAccount(UserInst self, BankAccountInst account) =>
    self.accounts.push(account)
    log.info("Account {0,number,#} added to user {1}", account.accountNumber, self.name)

method removeAccount(UserInst self, int accountNumber) =>
    for [i, acc] in self.accounts
        if acc.accountNumber == accountNumber
            self.accounts.remove(i)
            break
    log.info("Account {0,number,#} removed from user {1}", accountNumber, self.name)

method getAccounts(UserInst self) =>
    self.accounts

//////////////////////////////////////////////////////////////////////////////
// Bank
//////////////////////////////////////////////////////////////////////////////
// Dummy class level vars. (Make a single object of this type.)
type NilBankCls
    int _k = 0

//////////////////////////////////////////////////////////////////////////////
// Instance level vars.
type BankInst
    NilBankCls _cls
    UserInst[] users

//////////////////////////////////////////////////////////////////////////////
// Instance constructor(s)
method init(NilBankCls cls) =>
    self = BankInst.new()
    self.users := array.new<UserInst>(0)
    self._cls  := cls       // All objects will point to the *one* instance of the class level object.
    self

//////////////////////////////////////////////////////////////////////////////
// Instance method(s)
method addUser(BankInst self, UserInst user) =>
    self.users.push(user)
    log.info("User {0} added", user.name)

method findUser(BankInst self, int userId) =>
    UserInst retUser = na
    // Cannot use the variable 'user'. Doing so gives the error:
    // - Invalid object name: user. Namespaces of built-ins cannot be used.
    for u in self.users
        if u.userId == userId
            retUser := u
            break
    retUser

method transfer(BankInst self, BankAccountInst fromAccount, BankAccountInst toAccount, float amount) =>
    if self.users.size() > 0        // Workaround: We must use self
        u = self.users.get(0)
        u.userId += 0
    if fromAccount.balance >= amount
        fromAccount.withdraw(amount)
        toAccount.deposit(amount)
        log.info("Transferred {0,number,#.##} from account {1,number,#} to account {2,number,#}",
          amount, fromAccount.accountNumber, toAccount.accountNumber)

    else
        log.info("Insufficient funds for transfer")

//////////////////////////////////////////////////////////////////////////////
// Main
//////////////////////////////////////////////////////////////////////////////
if barstate.islast
    log.info("{0}\nAttempt to write a Pine Script version of a Simple Bank System", IND_TITLE)
   
    // Create class level vars
    bankAccCls = BankAccountCls.new()
    userCls = NilUserCls.new()
    bankCls = NilBankCls.new()

    // Create bank instance
    bank = bankCls.init()

    // Create users
    user1 = userCls.init(1, "Alice")
    user2 = userCls.init(2, "Bob")

    // Add users to the bank
    bank.addUser(user1)
    bank.addUser(user2)

    // Create accounts for users
    account1 = bankAccCls.initBankAccount()
    account2 = bankAccCls.initSavingsAccount(interestRate=0.05)

    // Add accounts to users
    user1.addAccount(account1)
    user2.addAccount(account2)

    // Perform transactions
    account1.deposit(1000.00)
    account1.withdraw(500)
    account2.deposit(2000)
    account2.applyInterest()

    // Transfer money
    bank.transfer(account1, account2, 200)

